package com.thekoldar.aoe_rms_spoon.ast.add_methods;

import java.time.ZonedDateTime;

import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.factory.Lists;
import org.eclipse.collections.api.list.MutableList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.zafarkhaja.semver.Version;
import com.thekoldar.aoe_rms_spoon.ast.IRMSNode;
import com.thekoldar.aoe_rms_spoon.ast.RMSExprs;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.AbstractRMSNode;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractCliffGeneration;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractConnectionGeneration;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractElevationGeneration;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractLandGeneration;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractObjectsGeneration;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractPlayerSetup;
import com.thekoldar.aoe_rms_spoon.ast.abstract_nodes.sections.AbstractTerrainGeneration;
import com.thekoldar.aoe_rms_spoon.ast.builders.IfBlockBuilder;
import com.thekoldar.aoe_rms_spoon.ast.builders.RandomBlockBuilder;
import com.thekoldar.aoe_rms_spoon.ast.functions.RandomNumberNode;
import com.thekoldar.aoe_rms_spoon.framework.ChangeLogEntry;
import com.thekoldar.aoe_rms_spoon.framework.SpoonFramework;

/**
 * Class that contains utility method. It is intended to be partially exposed by abstarct rms nodes
 * @author massi
 *
 */
public class Adds {
	
	private static final Logger LOG = LoggerFactory.getLogger(Adds.class);
	
	private IRMSNode attachment;
	
	public Adds(IRMSNode attachment) {
		this.attachment = attachment;
	}

	public IRMSNode comment(RichIterable<String> comments) {
		this.attachment.addStatement(this.attachment.getAgeVersion().comment(comments));
		return this.attachment;
	}
	
	public IRMSNode comment(String comment) {
		this.attachment.addStatement(this.attachment.getAgeVersion().comment(Lists.fixedSize.of(comment)));
		return this.attachment;
	}
	
	public IRMSNode constant(String name, int val) {
		this.attachment.addStatement(this.attachment.getAgeVersion().constant(name, val));
		return this.attachment;
	}
	
	public IRMSNode define(String file) {
		this.attachment.addStatement(this.attachment.getAgeVersion().define(file));
		return this.attachment;
	}
	
	public IRMSNode addFileInfo(String author, String description, Version version, RichIterable<ChangeLogEntry> changelogs) {
		MutableList<String> list = Lists.mutable.empty();
		list.add("Author: " + author);
		list.add("Description: " + description);
		list.add("Version: " + description);
		list.add(String.format("Date when the script was generated: %s", ZonedDateTime.now()));
		list.add(String.format("File automatically generated by aoe-rms-spoon software (version %s). See https://github.com/Koldar/aoe-rms-spoon for further information", SpoonFramework.getSpoonFrameworkVersion()));
		list.add("****** CHANGELOG ********");
		
		LOG.info("compute changelogs");
		list.addAll(changelogs.collect(c -> String.format(" - %s: %s;", c.getVersion(), c.getDescription())).toList());
		LOG.info("done compute changelogs");
		
		this.attachment.addStatement(
				this.attachment.getAgeVersion().comment(list)
		);
		return this.attachment;
	}
	
	public IRMSNode include(String name) {
		this.attachment.addStatement(this.attachment.getAgeVersion().include(name));
		return this.attachment;
	}
	
	public IRMSNode includeDrs(String name) {
		this.attachment.addStatement(this.attachment.getAgeVersion().includeDrs(name));
		return this.attachment;
	}
	
	
	public IRMSNode addIf(IRMSNode condition, IRMSNode then) {
		this.attachment.addStatement(this.attachment.getAgeVersion().ifNode()
				.addStatement(condition)
				.addStatement(then)
		);
		return this.attachment;
	}
	
	public IRMSNode addIf(IRMSNode condition, IRMSNode then, IRMSNode elseBlock) {
		this.attachment.addStatement(this.attachment.getAgeVersion().ifNode()
				.addStatement(condition)
				.addStatement(then)
				.addStatement(elseBlock)
		);
		return this.attachment;
	}
	
	public IfBlockBuilder beginIf(AbstractRMSNode parent) {
		return IfBlockBuilder.instance(parent);
	}
	
	public AbstractPlayerSetup playerSetup() {
		var result = this.attachment.getAgeVersion().playerSetup();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractLandGeneration landGeneration() {
		var result = this.attachment.getAgeVersion().landGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractTerrainGeneration terrainGeneration() {
		var result = this.attachment.getAgeVersion().terrainGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractObjectsGeneration objectsGeneration() {
		var result = this.attachment.getAgeVersion().objectsGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractConnectionGeneration connectionGeneration() {
		var result = this.attachment.getAgeVersion().connectionGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractCliffGeneration cliffGeneration() {
		var result = this.attachment.getAgeVersion().cliffGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public AbstractElevationGeneration elevationGeneration() {
		var result = this.attachment.getAgeVersion().elevationGeneration();
		this.attachment.addStatement(result);
		return result;
	}
	
	public RandomBlockBuilder startRandom() { 
		return RandomBlockBuilder.instance((IRMSNode)this.attachment);
	}
	
	public IRMSNode dict(AbstractRMSNode... values) {
		var result = RMSExprs.dict(values);
		this.attachment.addStatement(result);
		return this.attachment;
	}
	
	public IRMSNode rnd(int min, int max) {
		var result = new RandomNumberNode();
		result.addStatement(RMSExprs.intVal(min));
		result.addStatement(RMSExprs.intVal(max));
		this.attachment.addStatement(result);
		return this.attachment;
	}

}
